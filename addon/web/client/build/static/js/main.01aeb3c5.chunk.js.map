{"version":3,"sources":["message.ts","components/BreakPoint.tsx","utils.ts","components/EditFlow.tsx","components/FlowPreview.tsx","flow.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageType","BreakPoint","props","state","show","rule","method","url","action","haveRules","handleClose","bind","handleShow","handleSave","this","setState","rules","push","onSave","length","variant","Button","size","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","Group","as","Row","Label","column","sm","Col","Control","value","onChange","e","target","parseInt","Footer","React","Component","isTextBody","payload","header","test","join","getSize","len","isNaN","toFixed","Flow","msg","no","id","waitIntercept","request","response","path","_size","headerContentLengthExist","startTime","Date","now","endTime","costTime","status","REQUEST","_isTextRequest","_isTextResponse","_requestBody","_responseBody","curNo","content","URL","pathname","search","REQUEST_BODY","body","RESPONSE","RESPONSE_BODY","String","byteLength","host","statusCode","isTextRequest","TextDecoder","decode","isTextResponse","SendMessageType","allMessageBytes","buildMessageEdit","messageType","flow","DROP_REQUEST","DROP_RESPONSE","view","Uint8Array","set","TextEncoder","encode","CHANGE_REQUEST","CHANGE_RESPONSE","Error","ArrayBuffer","bodyLen","headerBytes","JSON","stringify","data","view2","DataView","setUint32","EditFlow","alertMsg","firstLine","headerLines","Object","keys","map","key","valstr","bodyLines","stringifyRequest","stringifyResponse","when","firstIndex","indexOf","slice","split","secondIndex","vals","proto","parseRequest","showAlert","onChangeRequest","parseResponse","onChangeResponse","className","msgType","onMessage","rows","Alert","FlowPreview","nextProps","isSelected","objA","objB","keysA","keysB","i","undefined","shallowEqual","fp","classNames","onShowDetail","FlowManager","items","_map","filterText","filterTimer","num","max","Map","filter","item","includes","oldest","shift","delete","get","text","callback","clearTimeout","setTimeout","App","flowMgr","ws","pageBottom","autoScore","flows","showList","flowTab","initWs","close","document","WebSocket","binaryType","onopen","console","log","onclose","onmessage","evt","meta","Int8Array","type","resp","contentStr","parse","err","parseMessage","add","scrollIntoView","behavior","addRequestBody","addResponse","addResponseBody","error","onerror","watcher","scrollMonitor","create","enterViewport","exitViewport","send","style","padding","requestBody","color","responseBody","clear","placeholder","changeFilterLazy","CHANGE_BREAK_POINT_RULES","rulesBytes","buildMessageMeta","Table","striped","bordered","tableLayout","width","f","preview","renderFlow","ref","el","initScrollMonitor","height","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01aeb3c5.chunk.js","sourcesContent":["import { getSize, isTextBody } from './utils'\n\nexport enum MessageType {\n  REQUEST = 1,\n  REQUEST_BODY = 2,\n  RESPONSE = 3,\n  RESPONSE_BODY = 4,\n}\n\nexport type Header = Record<string, string[]>\n\nexport interface IRequest {\n  method: string\n  url: string\n  proto: string\n  header: Header\n  body?: ArrayBuffer\n}\n\nexport interface IResponse {\n  statusCode: number\n  header: Header\n  body?: ArrayBuffer\n}\n\nexport interface IMessage {\n  type: MessageType\n  id: string\n  waitIntercept: boolean\n  content?: ArrayBuffer | IRequest | IResponse\n}\n\nexport interface IFlowPreview {\n  no: number\n  id: string\n  waitIntercept: boolean\n  host: string\n  path: string\n  method: string\n  statusCode: string\n  size: string\n  costTime: string\n}\n\nexport class Flow {\n  public no: number\n  public id: string\n  public waitIntercept: boolean\n  public request: IRequest\n  public response: IResponse | null = null\n\n  private url: URL\n  private path: string\n  private _size = 0\n  private size = '0'\n  private headerContentLengthExist = false\n\n  private startTime = Date.now()\n  private endTime = 0\n  private costTime = '(pending)'\n\n  public static curNo = 0\n\n  private status: MessageType = MessageType.REQUEST\n\n  private _isTextRequest: boolean | null\n  private _isTextResponse: boolean | null\n  private _requestBody: string | null\n  private _responseBody: string | null\n\n  constructor(msg: IMessage) {\n    this.no = ++Flow.curNo\n    this.id = msg.id\n    this.waitIntercept = msg.waitIntercept\n    this.request = msg.content as IRequest\n\n    this.url = new URL(this.request.url)\n    this.path = this.url.pathname + this.url.search\n\n    this._isTextRequest = null\n    this._isTextResponse = null\n    this._requestBody = null\n    this._responseBody = null\n  }\n\n  public addRequestBody(msg: IMessage): Flow {\n    this.status = MessageType.REQUEST_BODY\n    this.waitIntercept = msg.waitIntercept\n    this.request.body = msg.content as ArrayBuffer\n    return this\n  }\n\n  public addResponse(msg: IMessage): Flow {\n    this.status = MessageType.RESPONSE\n    this.waitIntercept = msg.waitIntercept\n    this.response = msg.content as IResponse\n\n    if (this.response && this.response.header && this.response.header['Content-Length'] != null) {\n      this.headerContentLengthExist = true\n      this._size = parseInt(this.response.header['Content-Length'][0])\n      this.size = getSize(this._size)\n    }\n\n    return this\n  }\n\n  public addResponseBody(msg: IMessage): Flow {\n    this.status = MessageType.RESPONSE_BODY\n    this.waitIntercept = msg.waitIntercept\n    if (this.response) this.response.body = msg.content as ArrayBuffer\n    this.endTime = Date.now()\n    this.costTime = String(this.endTime - this.startTime) + ' ms'\n\n    if (!this.headerContentLengthExist && this.response && this.response.body) {\n      this._size = this.response.body.byteLength\n      this.size = getSize(this._size)\n    }\n    return this\n  }\n\n  public preview(): IFlowPreview {\n    return {\n      no: this.no,\n      id: this.id,\n      waitIntercept: this.waitIntercept,\n      host: this.url.host,\n      path: this.path,\n      method: this.request.method,\n      statusCode: this.response ? String(this.response.statusCode) : '(pending)',\n      size: this.size,\n      costTime: this.costTime,\n    }\n  }\n\n  public isTextRequest(): boolean {\n    if (this._isTextRequest !== null) return this._isTextRequest\n    this._isTextRequest = isTextBody(this.request)\n    return this._isTextRequest\n  }\n\n  public requestBody(): string {\n    if (this._requestBody !== null) return this._requestBody\n    if (!this.isTextRequest()) {\n      this._requestBody = ''\n      return this._requestBody\n    }\n    if (this.status < MessageType.REQUEST_BODY) return ''\n    this._requestBody = new TextDecoder().decode(this.request.body)\n    return this._requestBody\n  }\n\n  public isTextResponse(): boolean | null {\n    if (this.status < MessageType.RESPONSE) return null\n    if (this._isTextResponse !== null) return this._isTextResponse\n    this._isTextResponse = isTextBody(this.response as IResponse)\n    return this._isTextResponse\n  }\n\n  public responseBody(): string {\n    if (this._responseBody !== null) return this._responseBody\n    if (this.status < MessageType.RESPONSE) return ''\n    if (!this.isTextResponse()) {\n      this._responseBody = ''\n      return this._responseBody\n    }\n    if (this.status < MessageType.RESPONSE_BODY) return ''\n    this._responseBody = new TextDecoder().decode(this.response?.body)\n    return this._responseBody\n  }\n}\n\nconst allMessageBytes = [\n  MessageType.REQUEST,\n  MessageType.REQUEST_BODY,\n  MessageType.RESPONSE,\n  MessageType.RESPONSE_BODY,\n]\n\n\n// type: 1/2/3/4\n// messageFlow\n// version 1 byte + type 1 byte + id 36 byte + waitIntercept 1 byte + content left bytes\nexport const parseMessage = (data: ArrayBuffer): IMessage | null => {\n  if (data.byteLength < 39) return null\n  const meta = new Int8Array(data.slice(0, 39))\n  const version = meta[0]\n  if (version !== 1) return null\n  const type = meta[1] as MessageType\n  if (!allMessageBytes.includes(type)) return null\n  const id = new TextDecoder().decode(data.slice(2, 38))\n  const waitIntercept = meta[38] === 1\n\n  const resp: IMessage = {\n    type,\n    id,\n    waitIntercept,\n  }\n  if (data.byteLength === 39) return resp\n  if (type === MessageType.REQUEST_BODY || type === MessageType.RESPONSE_BODY) {\n    resp.content = data.slice(39)\n    return resp\n  }\n\n  const contentStr = new TextDecoder().decode(data.slice(39))\n  let content: any\n  try {\n    content = JSON.parse(contentStr)\n  } catch (err) {\n    return null\n  }\n\n  resp.content = content\n  return resp\n}\n\n\nexport enum SendMessageType {\n  CHANGE_REQUEST = 11,\n  CHANGE_RESPONSE = 12,\n  DROP_REQUEST = 13,\n  DROP_RESPONSE = 14,\n  CHANGE_BREAK_POINT_RULES = 21,\n}\n\n// type: 11/12/13/14\n// messageEdit\n// version 1 byte + type 1 byte + id 36 byte + header len 4 byte + header content bytes + body len 4 byte + [body content bytes]\nexport const buildMessageEdit = (messageType: SendMessageType, flow: Flow) => {\n  if (messageType === SendMessageType.DROP_REQUEST || messageType === SendMessageType.DROP_RESPONSE) {\n    const view = new Uint8Array(38)\n    view[0] = 1\n    view[1] = messageType\n    view.set(new TextEncoder().encode(flow.id), 2)\n    return view\n  }\n\n  let header: Omit<IRequest, 'body'> | Omit<IResponse, 'body'>\n  let body: ArrayBuffer | Uint8Array | undefined\n\n  if (messageType === SendMessageType.CHANGE_REQUEST) {\n    ({ body, ...header } = flow.request)\n  } else if (messageType === SendMessageType.CHANGE_RESPONSE) {\n    ({ body, ...header } = flow.response as IResponse)\n  } else {\n    throw new Error('invalid message type')\n  }\n\n  if (body instanceof ArrayBuffer) body = new Uint8Array(body)\n  const bodyLen = (body && body.byteLength) ? body.byteLength : 0\n\n  if ('Content-Encoding' in header.header) delete header.header['Content-Encoding']\n  if ('Transfer-Encoding' in header.header) delete header.header['Transfer-Encoding']\n  header.header['Content-Length'] = [String(bodyLen)]\n\n  const headerBytes = new TextEncoder().encode(JSON.stringify(header))\n  const len = 2 + 36 + 4 + headerBytes.byteLength + 4 + bodyLen\n  const data = new ArrayBuffer(len)\n  const view = new Uint8Array(data)\n  view[0] = 1\n  view[1] = messageType\n  view.set(new TextEncoder().encode(flow.id), 2)\n  view.set(headerBytes, 2 + 36 + 4)\n  if (bodyLen) view.set(body as Uint8Array, 2 + 36 + 4 + headerBytes.byteLength + 4)\n\n  const view2 = new DataView(data)\n  view2.setUint32(2 + 36, headerBytes.byteLength)\n  view2.setUint32(2 + 36 + 4 + headerBytes.byteLength, bodyLen)\n\n  return view\n}\n\n\n// type: 21\n// messageMeta\n// version 1 byte + type 1 byte + content left bytes\nexport const buildMessageMeta = (messageType: SendMessageType, rules: any) => {\n  if (messageType !== SendMessageType.CHANGE_BREAK_POINT_RULES) {\n    throw new Error('invalid message type')\n  }\n\n  const rulesBytes = new TextEncoder().encode(JSON.stringify(rules))\n  const view = new Uint8Array(2 + rulesBytes.byteLength)\n  view[0] = 1\n  view[1] = messageType\n  view.set(rulesBytes, 2)\n\n  return view\n}\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\ntype Method = 'ALL' | 'GET' | 'POST' | 'PUT' | 'DELETE' | ''\ntype Action = 1 | 2 | 3\ninterface IRule {\n  method: Method\n  url: string\n  action: Action\n}\n\ninterface IState {\n  show: boolean\n  rule: IRule\n  haveRules: boolean\n}\n\ninterface IProps {\n  onSave: (rules: IRule[]) => void\n}\n\nclass BreakPoint extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      show: false,\n\n      rule: {\n        method: 'ALL',\n        url: '',\n        action: 1,\n      },\n\n      haveRules: false,\n    }\n\n    this.handleClose = this.handleClose.bind(this)\n    this.handleShow = this.handleShow.bind(this)\n    this.handleSave = this.handleSave.bind(this)\n  }\n\n  handleClose() {\n    this.setState({ show: false })\n  }\n\n  handleShow() {\n    this.setState({ show: true })\n  }\n\n  handleSave() {\n    const { rule } = this.state\n    const rules: IRule[] = []\n    if (rule.url) {\n      rules.push({\n        method: rule.method === 'ALL' ? '' : rule.method,\n        url: rule.url,\n        action: rule.action,\n      })\n    }\n\n    this.props.onSave(rules)\n    this.handleClose()\n\n    this.setState({ haveRules: rules.length ? true : false })\n  }\n\n  render() {\n    const { rule, haveRules } = this.state\n    const variant = haveRules ? 'success' : 'primary'\n\n    return (\n      <div>\n        <Button variant={variant} size=\"sm\" onClick={this.handleShow}>BreakPoint</Button>\n\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Set BreakPoint</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>Method</Form.Label>\n              <Col sm={10}>\n                <Form.Control as=\"select\" value={rule.method} onChange={e => { this.setState({ rule: { ...rule, method: e.target.value as Method } }) }}>\n                  <option>ALL</option>\n                  <option>GET</option>\n                  <option>POST</option>\n                  <option>PUT</option>\n                  <option>DELETE</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>URL</Form.Label>\n              <Col sm={10}><Form.Control value={rule.url} onChange={e => { this.setState({ rule: { ...rule, url: e.target.value } }) }} /></Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n              <Form.Label column sm={2}>Action</Form.Label>\n              <Col sm={10}>\n                <Form.Control as=\"select\" value={rule.action} onChange={e => { this.setState({ rule: { ...rule, action: parseInt(e.target.value) as Action } }) }}>\n                  <option value=\"1\">Request</option>\n                  <option value=\"2\">Response</option>\n                  <option value=\"3\">Both</option>\n                </Form.Control>\n              </Col>\n            </Form.Group>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.handleSave}>\n              Save\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default BreakPoint\n","import { IRequest, IResponse } from './message'\n\nexport const isTextBody = (payload: IRequest | IResponse) => {\n  if (!payload) return false\n  if (!payload.header) return false\n  if (!payload.header['Content-Type']) return false\n\n  return /text|javascript|json|x-www-form-urlencoded/.test(payload.header['Content-Type'].join(''))\n}\n\nexport const getSize = (len: number) => {\n  if (!len) return '0'\n  if (isNaN(len)) return '0'\n  if (len <= 0) return '0'\n\n  if (len < 1024) return `${len} B`\n  if (len < 1024*1024) return `${(len/1024).toFixed(2)} KB`\n  return `${(len/(1024*1024)).toFixed(2)} MB`\n}\n\nexport const shallowEqual = (objA: any, objB: any) => {\n  if (objA === objB) return true\n\n  const keysA = Object.keys(objA)\n  const keysB = Object.keys(objB)\n  if (keysA.length !== keysB.length) return false\n\n  for (let i = 0; i < keysA.length; i++) {\n    const key = keysA[i]\n    if (objB[key] === undefined || objA[key] !== objB[key]) return false\n  }\n  return true\n}\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { SendMessageType, buildMessageEdit, IRequest, IResponse, Header, Flow } from '../message'\nimport { isTextBody } from '../utils'\n\n\nconst stringifyRequest = (request: IRequest) => {\n  const firstLine = `${request.method} ${request.url}`\n  const headerLines = Object.keys(request.header).map(key => {\n    const valstr = request.header[key].join(' \\t ') // for parse convenience\n    return `${key}: ${valstr}`\n  }).join('\\n')\n\n  let bodyLines = ''\n  if (request.body && isTextBody(request)) bodyLines = new TextDecoder().decode(request.body)\n\n  return `${firstLine}\\n\\n${headerLines}\\n\\n${bodyLines}`\n}\n\nconst parseRequest = (content: string): IRequest | undefined => {\n  const firstIndex = content.indexOf('\\n\\n')\n  if (firstIndex <= 0) return\n\n  const firstLine = content.slice(0, firstIndex)\n  const [method, url] = firstLine.split(' ')\n  if (!method || !url) return\n\n  const secondIndex = content.indexOf('\\n\\n', firstIndex + 2)\n  if (secondIndex <= 0) return\n  const headerLines = content.slice(firstIndex + 2, secondIndex)\n  const header: Header = {}\n  for (const line of headerLines.split('\\n')) {\n    const [key, vals] = line.split(': ')\n    if (!key || !vals) return\n    header[key] = vals.split(' \\t ')\n  }\n\n  const bodyLines = content.slice(secondIndex + 2)\n  let body: ArrayBuffer | undefined\n  if (bodyLines) body = new TextEncoder().encode(bodyLines)\n\n  return {\n    method,\n    url,\n    proto: '',\n    header,\n    body,\n  }\n}\n\nconst stringifyResponse = (response: IResponse) => {\n  const firstLine = `${response.statusCode}`\n  const headerLines = Object.keys(response.header).map(key => {\n    const valstr = response.header[key].join(' \\t ') // for parse convenience\n    return `${key}: ${valstr}`\n  }).join('\\n')\n\n  let bodyLines = ''\n  if (response.body && isTextBody(response)) bodyLines = new TextDecoder().decode(response.body)\n\n  return `${firstLine}\\n\\n${headerLines}\\n\\n${bodyLines}`\n}\n\nconst parseResponse = (content: string): IResponse | undefined => {\n  const firstIndex = content.indexOf('\\n\\n')\n  if (firstIndex <= 0) return\n\n  const firstLine = content.slice(0, firstIndex)\n  const statusCode = parseInt(firstLine)\n  if (isNaN(statusCode)) return\n\n  const secondIndex = content.indexOf('\\n\\n', firstIndex + 2)\n  if (secondIndex <= 0) return\n  const headerLines = content.slice(firstIndex + 2, secondIndex)\n  const header: Header = {}\n  for (const line of headerLines.split('\\n')) {\n    const [key, vals] = line.split(': ')\n    if (!key || !vals) return\n    header[key] = vals.split(' \\t ')\n  }\n\n  const bodyLines = content.slice(secondIndex + 2)\n  let body: ArrayBuffer | undefined\n  if (bodyLines) body = new TextEncoder().encode(bodyLines)\n\n  return {\n    statusCode,\n    header,\n    body,\n  }\n}\n\n\ninterface IProps {\n  flow: Flow\n  onChangeRequest: (request: IRequest) => void\n  onChangeResponse: (response: IResponse) => void\n  onMessage: (msg: ArrayBufferLike) => void\n}\n\ninterface IState {\n  show: boolean\n  alertMsg: string\n  content: string\n}\n\nclass EditFlow extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      show: false,\n      alertMsg: '',\n      content: '',\n    }\n\n    this.handleClose = this.handleClose.bind(this)\n    this.handleShow = this.handleShow.bind(this)\n    this.handleSave = this.handleSave.bind(this)\n  }\n\n  showAlert(msg: string) {\n    this.setState({ alertMsg: msg })\n  }\n\n  handleClose() {\n    this.setState({ show: false })\n  }\n\n  handleShow() {\n    const { flow } = this.props\n    const when = flow.response ? 'response' : 'request'\n\n    let content = ''\n    if (when === 'request') {\n      content = stringifyRequest(flow.request)\n    } else {\n      content = stringifyResponse(flow.response as IResponse)\n    }\n\n    this.setState({ show: true, alertMsg: '', content })\n  }\n\n  handleSave() {\n    const { flow } = this.props\n    const when = flow.response ? 'response' : 'request'\n\n    const { content } = this.state\n\n    if (when === 'request') {\n      const request = parseRequest(content)\n      if (!request) {\n        this.showAlert('parse error')\n        return\n      }\n\n      this.props.onChangeRequest(request)\n      this.handleClose()\n    } else {\n      const response = parseResponse(content)\n      if (!response) {\n        this.showAlert('parse error')\n        return\n      }\n\n      this.props.onChangeResponse(response)\n      this.handleClose()\n    }\n  }\n\n  render() {\n    const { flow } = this.props\n    if (!flow.waitIntercept) return null\n\n    const { alertMsg } = this.state\n\n    const when = flow.response ? 'response' : 'request'\n\n    return (\n      <div className=\"flow-wait-area\">\n\n        <Button size=\"sm\" onClick={this.handleShow}>Edit</Button>\n\n        <Button size=\"sm\" onClick={() => {\n          const msgType = when === 'response' ? SendMessageType.CHANGE_RESPONSE : SendMessageType.CHANGE_REQUEST\n          const msg = buildMessageEdit(msgType, flow)\n          this.props.onMessage(msg)\n        }}>Continue</Button>\n\n        <Button size=\"sm\" onClick={() => {\n          const msgType = when === 'response' ? SendMessageType.DROP_RESPONSE : SendMessageType.DROP_REQUEST\n          const msg = buildMessageEdit(msgType, flow)\n          this.props.onMessage(msg)\n        }}>Drop</Button>\n\n\n        <Modal size=\"lg\" show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Edit {when === 'request' ? 'Request' : 'Response'}</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group>\n              <Form.Control as=\"textarea\" rows={10} value={this.state.content} onChange={e => { this.setState({ content: e.target.value }) }} />\n            </Form.Group>\n            {\n              !alertMsg ? null : <Alert variant=\"danger\">{alertMsg}</Alert>\n            }\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.handleSave}>\n              Save\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n      </div>\n    )\n  }\n}\n\nexport default EditFlow\n","import React from 'react'\nimport { IFlowPreview } from '../message'\nimport { shallowEqual } from '../utils'\n\ninterface IProps {\n  flow: IFlowPreview\n  isSelected: boolean\n  onShowDetail: () => void\n}\n\nclass FlowPreview extends React.Component<IProps> {\n  shouldComponentUpdate(nextProps: IProps) {\n    if (nextProps.isSelected === this.props.isSelected && shallowEqual(nextProps.flow, this.props.flow)) {\n      return false\n    }\n    return true\n  }\n\n  render() {\n    const fp = this.props.flow\n\n    const classNames = []\n    if (this.props.isSelected) classNames.push('tr-selected')\n    if (fp.waitIntercept) classNames.push('tr-wait-intercept')\n\n    return (\n      <tr className={classNames.length ? classNames.join(' ') : undefined}\n        onClick={() => {\n          this.props.onShowDetail()\n        }}\n      >\n        <td>{fp.no}</td>\n        <td>{fp.method}</td>\n        <td>{fp.host}</td>\n        <td>{fp.path}</td>\n        <td>{fp.statusCode}</td>\n        <td>{fp.size}</td>\n        <td>{fp.costTime}</td>\n      </tr>\n    )\n  }\n}\n\nexport default FlowPreview\n","import { Flow } from './message'\n\nexport class FlowManager {\n  private items: Flow[]\n  private _map: Map<string, Flow>\n  private filterText: string\n  private filterTimer: number | null\n  private num: number\n  private max: number\n\n  constructor() {\n    this.items = []\n    this._map = new Map()\n    this.filterText = ''\n    this.filterTimer = null\n    this.num = 0\n\n    this.max = 1000\n  }\n\n  showList() {\n    if (!this.filterText) return this.items\n    return this.items.filter(item => {\n      return item.request.url.includes(this.filterText)\n    })\n  }\n\n  add(item: Flow) {\n    item.no = ++this.num\n    this.items.push(item)\n    this._map.set(item.id, item)\n\n    if (this.items.length > this.max) {\n      const oldest = this.items.shift()\n      if (oldest) this._map.delete(oldest.id)\n    }\n  }\n\n  get(id: string) {\n    return this._map.get(id)\n  }\n\n  changeFilter(text: string) {\n    this.filterText = text\n  }\n\n  changeFilterLazy(text: string, callback: () => void) {\n    if (this.filterTimer) {\n      clearTimeout(this.filterTimer)\n      this.filterTimer = null\n    }\n\n    this.filterTimer = setTimeout(() => {\n      this.filterText = text\n      callback()\n    }, 300) as any\n  }\n\n  clear() {\n    this.items = []\n    this._map = new Map()\n  }\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport scrollMonitor from 'scrollmonitor'\nimport './App.css'\n\nimport BreakPoint from './components/BreakPoint'\nimport EditFlow from './components/EditFlow'\nimport FlowPreview from './components/FlowPreview'\n\nimport { FlowManager } from './flow'\nimport { isTextBody } from './utils'\nimport { parseMessage, SendMessageType, buildMessageMeta, Flow, MessageType, IResponse } from './message'\n\ninterface IState {\n  flows: Flow[]\n  flow: Flow | null\n  flowTab: 'Headers' | 'Preview' | 'Response'\n}\n\nclass App extends React.Component<any, IState> {\n  private flowMgr: FlowManager\n  private ws: WebSocket | null\n\n  private pageBottom: HTMLDivElement | null\n  private autoScore = false\n\n  constructor(props: any) {\n    super(props)\n\n    this.flowMgr = new FlowManager()\n\n    this.state = {\n      flows: this.flowMgr.showList(),\n      flow: null,\n\n      flowTab: 'Headers', // Headers, Preview, Response\n    }\n\n    this.ws = null\n    this.pageBottom = null\n  }\n\n  componentDidMount() {\n    this.initWs()\n  }\n\n  componentWillUnmount() {\n    if (this.ws) {\n      this.ws.close()\n    }\n  }\n\n  initWs() {\n    if (this.ws) return\n\n    let host\n    if (process.env.NODE_ENV === 'development') {\n      host = 'localhost:9081'\n    } else {\n      host = new URL(document.URL).host\n    }\n    this.ws = new WebSocket(`ws://${host}/echo`)\n    this.ws.binaryType = 'arraybuffer'\n    this.ws.onopen = () => { console.log('OPEN') }\n    this.ws.onclose = () => { console.log('CLOSE') }\n    this.ws.onmessage = evt => {\n      const msg = parseMessage(evt.data)\n      if (!msg) {\n        console.error('parse error:', evt.data)\n        return\n      }\n      // console.log('msg:', msg)\n\n      if (msg.type === MessageType.REQUEST) {\n        const flow = new Flow(msg)\n        this.flowMgr.add(flow)\n        this.setState({ flows: this.flowMgr.showList() }, () => {\n          if (this.pageBottom && this.autoScore) this.pageBottom.scrollIntoView({ behavior: 'auto' })\n        })\n      }\n      else if (msg.type === MessageType.REQUEST_BODY) {\n        const flow = this.flowMgr.get(msg.id)\n        if (!flow) return\n        flow.addRequestBody(msg)\n        this.setState({ flows: this.state.flows })\n      }\n      else if (msg.type === MessageType.RESPONSE) {\n        const flow = this.flowMgr.get(msg.id)\n        if (!flow) return\n        flow.addResponse(msg)\n        this.setState({ flows: this.state.flows })\n      }\n      else if (msg.type === MessageType.RESPONSE_BODY) {\n        const flow = this.flowMgr.get(msg.id)\n        if (!flow || !flow.response) return\n        flow.addResponseBody(msg)\n        this.setState({ flows: this.state.flows })\n      }\n    }\n    this.ws.onerror = evt => {\n      console.log('ERROR:', evt)\n    }\n  }\n\n  initScrollMonitor() {\n    if (!this.pageBottom) return\n\n    const watcher = scrollMonitor.create(this.pageBottom)\n    watcher.enterViewport(() => {\n      this.autoScore = true\n    })\n    watcher.exitViewport(() => {\n      this.autoScore = false\n    })\n  }\n\n  renderFlow() {\n    const { flow, flowTab } = this.state\n    if (!flow) return null\n\n    const request = flow.request\n    const response: IResponse = (flow.response || {}) as any\n\n    return (\n      <div className=\"flow-detail\">\n        <div className=\"header-tabs\">\n          <span onClick={() => { this.setState({ flow: null }) }}>x</span>\n          <span className={flowTab === 'Headers' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Headers' }) }}>Headers</span>\n          <span className={flowTab === 'Preview' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Preview' }) }}>Preview</span>\n          <span className={flowTab === 'Response' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Response' }) }}>Response</span>\n\n          <EditFlow\n            flow={flow}\n            onChangeRequest={request => {\n              flow.request.method = request.method\n              flow.request.url = request.url\n              flow.request.header = request.header\n              if (isTextBody(flow.request)) flow.request.body = request.body\n              this.setState({ flows: this.state.flows })\n            }}\n            onChangeResponse={response => {\n              if (!flow.response) flow.response = {} as IResponse\n\n              flow.response.statusCode = response.statusCode\n              flow.response.header = response.header\n              if (isTextBody(flow.response)) flow.response.body = response.body\n              this.setState({ flows: this.state.flows })\n            }}\n            onMessage={msg => {\n              if (this.ws) this.ws.send(msg)\n              flow.waitIntercept = false\n              this.setState({ flows: this.state.flows })\n            }}\n          />\n\n        </div>\n\n        <div style={{ padding: '20px' }}>\n          {\n            !(flowTab === 'Headers') ? null :\n              <div>\n                <div className=\"header-block\">\n                  <p>General</p>\n                  <div className=\"header-block-content\">\n                    <p>Request URL: {request.url}</p>\n                    <p>Request Method: {request.method}</p>\n                    <p>Status Code: {`${response.statusCode || '(pending)'}`}</p>\n                  </div>\n                </div>\n\n                {\n                  !(response.header) ? null :\n                    <div className=\"header-block\">\n                      <p>Response Headers</p>\n                      <div className=\"header-block-content\">\n                        {\n                          Object.keys(response.header).map(key => {\n                            return (\n                              <p key={key}>{key}: {response.header[key].join(' ')}</p>\n                            )\n                          })\n                        }\n                      </div>\n                    </div>\n                }\n\n                <div className=\"header-block\">\n                  <p>Request Headers</p>\n                  <div className=\"header-block-content\">\n                    {\n                      !(request.header) ? null :\n                        Object.keys(request.header).map(key => {\n                          return (\n                            <p key={key}>{key}: {request.header[key].join(' ')}</p>\n                          )\n                        })\n                    }\n                  </div>\n                </div>\n\n                {\n                  !(request.body && request.body.byteLength) ? null :\n                    <div className=\"header-block\">\n                      <p>Request Body</p>\n                      <div className=\"header-block-content\">\n                        <p>\n                          {\n                            !(flow.isTextRequest()) ? <span style={{ color: 'gray' }}>Not text</span> :\n                              flow.requestBody()\n                          }\n                        </p>\n                      </div>\n                    </div>\n                }\n\n              </div>\n          }\n\n          {\n            !(flowTab === 'Response') ? null :\n              !(response.body && response.body.byteLength) ? <div style={{ color: 'gray' }}>No response</div> :\n                !(flow.isTextResponse()) ? <div style={{ color: 'gray' }}>Not text response</div> :\n                  <div>\n                    {flow.responseBody()}\n                  </div>\n          }\n        </div>\n\n      </div>\n    )\n  }\n\n  render() {\n    const { flows } = this.state\n    return (\n      <div className=\"main-table-wrap\">\n        <div className=\"top-control\">\n          <div><Button size=\"sm\" onClick={() => {\n            this.flowMgr.clear()\n            this.setState({ flows: this.flowMgr.showList(), flow: null })\n          }}>Clear</Button></div>\n          <div>\n            <Form.Control\n              size=\"sm\" placeholder=\"Filter\"\n              onChange={(e) => {\n                const value = e.target.value\n                this.flowMgr.changeFilterLazy(value, () => {\n                  this.setState({ flows: this.flowMgr.showList() })\n                })\n              }}\n            >\n            </Form.Control>\n          </div>\n\n          <BreakPoint onSave={rules => {\n            const msg = buildMessageMeta(SendMessageType.CHANGE_BREAK_POINT_RULES, rules)\n            if (this.ws) this.ws.send(msg)\n          }} />\n        </div>\n\n        <Table striped bordered size=\"sm\" style={{ tableLayout: 'fixed' }}>\n          <thead>\n            <tr>\n              <th style={{ width: '50px' }}>No</th>\n              <th style={{ width: '80px' }}>Method</th>\n              <th style={{ width: '200px' }}>Host</th>\n              <th style={{ width: '600px' }}>Path</th>\n              <th style={{ width: '80px' }}>Status</th>\n              <th style={{ width: '90px' }}>Size</th>\n              <th style={{ width: '90px' }}>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              flows.map(f => {\n                const fp = f.preview()\n\n                return (\n                  <FlowPreview\n                    key={fp.id}\n                    flow={fp}\n                    isSelected={(this.state.flow && this.state.flow.id === fp.id) ? true : false}\n                    onShowDetail={() => {\n                      this.setState({ flow: f })\n                    }}\n                  />\n                )\n              })\n            }\n          </tbody>\n        </Table>\n\n        {this.renderFlow()}\n\n        <div ref={el => {\n          if (this.pageBottom) return\n          this.pageBottom = el\n          this.initScrollMonitor()\n        }} style={{ height: '0px', visibility: 'hidden' }}>bottom</div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}